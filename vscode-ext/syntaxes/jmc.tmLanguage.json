{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "JMC",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#double_strings"
    },
    {
      "include": "#single_strings"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#target_selectors"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#multiline_string"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#classFunction"
    },
    {
      "include": "#classDefine"
    }
  ],
  "repository": {
    "target_selectors": {
      "patterns": [
        {
          "name": "constant.numeric.jmc",
          "match": "(@[parse])"
        },
        {
          "name": "constant.numeric.jmc",
          "match": "(@add|@lazy)"
        }
      ]
    },
    "functions": {
      "match": "([a-zA-Z_]\\w*)\\s*(\\()",
      "captures": {
        "1": {
          "name": "entity.name.function.jmc"
        },
        "2": {
          "name": "keyword.operator.jmc"
        }
      }
    },
    "classFunction": {
      "match": "((?:(?:[a-zA-Z_]\\w*)?\\.\\s*)+)\\s*([a-zA-Z_]\\w*)\\s*\\(",
      "captures": {
        "1": {
          "name": "entity.name.class.jmc"
        },
        "2": {
          "name": "entity.name.function.jmc"
        }
      }
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b((class)\\s+([a-zA-Z_]\\w*))",
          "captures": {
            "2": {
              "name": "keyword.control.jmc"
            },
            "1": {
              "name": "entity.name.class.jmc"
            }
          }
        },
        {
          "name": "keyword.control.jmc",
          "match": "\\b(if|unless|else|while|for|do|switch|case|default|break|return|schedule|expand|with|extends)\\b"
        },
        {
          "name": "keyword.control.less.jmc",
          "match": "(import)"
        },
        {
          "name": "constant.language.jmc",
          "match": "(true|false)"
        },
        {
          "name": "entity.name.this.jmc",
          "match": "(this)"
        },
        {
          "name": "storage.type.function.jmc",
          "match": "\\b(function)\\b"
        },
        {
          "name": "storage.type.new.jmc",
          "match": "\\b(new)\\b"
        },
        {
          "name": "storage.type.arrow.jmc",
          "match": "(=>)"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.jmc",
          "match": "([=*\\-/+%.><!?,:~^]|\\|\\||&&|matches)"
        }
      ]
    },
    "double_strings": {
      "name": "string.quoted.double.jmc",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.jmc",
          "match": "\\\\."
        }
      ]
    },
    "single_strings": {
      "name": "string.quoted.single.jmc",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.jmc",
          "match": "\\\\."
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.jmc",
          "match": "(//.*)"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.jmc",
          "match": "\\b(\\d+(?:\\.\\d+)?[bslfdBSLFD]?)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.name.jmc",
          "match": "\\$[a-zA-Z_][0-9a-zA-Z_]*"
        }
      ]
    },
    "multiline_string": {
      "name": "string.quoted.jmc",
      "begin": "`",
      "end": "`",
      "patterns": [
        {
          "name": "constant.character.escape.jmc",
          "match": "\\\\."
        }
      ]
    }
  },
  "scopeName": "source.jmc"
}
